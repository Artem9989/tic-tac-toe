{"version":3,"sources":["reportWebVitals.js","cell.jsx","board.jsx","helpers/calculateWinner.js","Game.jsx","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Cell","props","className","onClick","value","Board","renderCell","i","squares","calculateWinner","lines","length","a","b","c","Game","status","useState","xIsNext","setxIsNext","Array","fill","history","sethistory","stepNumber","setstepNumber","jumpTo","step","current","winner","slice","concat","handleClick","map","move","desc","href","memo","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iLAYeA,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,cCACQ,EAJF,SAACC,GACN,OAAO,yBAAQC,UAAU,SAASC,QAAS,WAAMF,EAAME,WAAhD,cAA8DF,EAAMG,MAApE,QC2BAC,EA5BD,SAACJ,GAEf,IAAMK,EAAa,SAACC,GACZ,OAAO,cAAC,EAAD,CAAMH,MAAOH,EAAMO,QAAQD,GAAIJ,QAAS,WAAMF,EAAME,QAAQI,OAGvE,OACI,gCACI,sBAAKL,UAAU,YAAf,UACKI,EAAW,GACXA,EAAW,GACXA,EAAW,MAEhB,sBAAKJ,UAAU,YAAf,UACKI,EAAW,GACXA,EAAW,GACXA,EAAW,MAEhB,sBAAKJ,UAAU,YAAf,UACKI,EAAW,GACXA,EAAW,GACXA,EAAW,UCvBb,SAASG,EAAgBD,GAWpC,IAVA,IAAME,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAH,EAAI,EAAGA,EAAIG,EAAMC,OAAQJ,IAAK,CAAC,IAAD,cACnBG,EAAMH,GADa,GAC9BK,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAIN,EAAQI,IAAMJ,EAAQI,KAAOJ,EAAQK,IAAML,EAAQI,KAAOJ,EAAQM,GACpE,OAAON,EAAQI,GAGnB,OAAO,KCdX,IAAMG,EAAO,WAAM,IAyCXC,EAzCW,EASWC,oBAAS,GATpB,mBASZC,EATY,KASHC,EATG,OAUWF,mBAAS,CAAC,CAACT,QAASY,MAAM,GAAGC,KAAK,SAV7C,mBAUZC,EAVY,KAUHC,EAVG,OAWiBN,mBAAS,GAX1B,mBAWZO,EAXY,KAWAC,EAXA,KAkCbC,EAAS,SAACC,GACZF,EAAcE,GACdR,IAAaQ,EAAK,KAEZC,EAAUN,EAAQE,GAClBK,EAASpB,EAAgBmB,EAAQpB,SAUvC,OANIQ,EADDa,EACU,aAAeA,EAIjB,oBAAsBX,EAAS,IAAK,KAG3C,gCACI,6CAGA,sBAAKhB,UAAU,OAAf,UACI,qBAAKA,UAAU,aAAf,SACI,cAAC,EAAD,CACIM,QAASoB,EAAQpB,QACjBL,QAAS,SAACI,GAAD,OA7Cb,SAACA,GACjB,IACMC,EADUc,EAAQA,EAAQX,OAAQ,GAChBH,QAAQsB,QAE5BrB,EAAgBD,IAAYA,EAAQD,KAGxCC,EAASD,GAAKW,EAAS,IAAK,IAC5BC,GAAYD,GACZK,EAAWD,EAAQS,OAAO,CAAC,CAACvB,cAC5BiB,EAAcD,EAAW,IAmCUQ,CAAYzB,QAGnC,sBAAKL,UAAU,YAAf,UACI,8BACKc,IAEL,6BAvCTM,EAAQW,KAAI,SAACN,EAAKO,GACrB,IAAMC,EAAOD,EAAO,cAAWA,EAAQ,aACvC,OACI,mCAAgB,mBAAGE,KAAK,IAAIjC,QAAS,kBAAMuB,EAAOQ,IAAlC,SAA0CC,MAAjDD,kBA6CNG,iBAAKtB,G,MCxEpBuB,IAASC,OACP,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM1BnD,M","file":"static/js/main.3bf3b77e.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\r\n\r\n\r\nconst Cell = (props) => {\r\n        return <button className='square' onClick={()=> {props.onClick()}}> {props.value} </button>\r\n}\r\n\r\nexport default Cell;","import React from 'react'\r\nimport Cell from './cell.jsx'\r\n\r\nconst Board = (props) => {\r\n\r\nconst renderCell = (i) => {\r\n        return <Cell value={props.squares[i]} onClick={()=> {props.onClick(i)}} />\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <div className='board-row'>\r\n                {renderCell(0)}\r\n                {renderCell(1)}\r\n                {renderCell(2)}\r\n            </div>\r\n            <div className='board-row'>\r\n                {renderCell(3)}\r\n                {renderCell(4)}\r\n                {renderCell(5)}\r\n            </div>\r\n            <div className='board-row'>\r\n                {renderCell(6)}\r\n                {renderCell(7)}\r\n                {renderCell(8)}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Board;","\r\nexport default function calculateWinner(squares) {\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6]\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n        return squares[a];\r\n      }\r\n    }\r\n    return null;\r\n  }","import React, {useState, memo} from 'react'\r\nimport Board from './board.jsx'\r\nimport calculateWinner from './helpers/calculateWinner.js'\r\n\r\nconst Game = () => {\r\n\r\n// const state = {\r\n//     xIsNext: true,\r\n//     stepNumber: 0,\r\n//     history: [{\r\n//         squares: Array(9).fill(null)\r\n//     }]\r\n// };\r\nconst [xIsNext, setxIsNext] = useState(true);\r\nconst [history, sethistory] = useState([{squares: Array(9).fill(null)}]);\r\nconst [stepNumber, setstepNumber] = useState(0);\r\n\r\nconst handleClick = (i) =>{\r\n    const current = history[history.length -1];\r\n    const squares = current.squares.slice();\r\n    \r\n    if (calculateWinner(squares) || squares[i]){\r\n        return;\r\n    }\r\n    squares [i] = xIsNext? 'X': 'O';\r\n    setxIsNext(!xIsNext);\r\n    sethistory(history.concat([{squares}]));\r\n    setstepNumber(stepNumber+1)\r\n}\r\nconst paintMoves = () => {\r\n    return history.map((step,move)=> {\r\n        const desc = move? ('Moveâ„– ' + move) : 'game start';\r\n        return (\r\n            <li key={move}> <a href=\"#\" onClick={() => jumpTo(move)}>{desc}</a>\r\n             </li>\r\n        )\r\n    })\r\n}\r\nconst jumpTo = (step) => {\r\n    setstepNumber(step);\r\n    setxIsNext ((step%2)? false:true)\r\n}\r\n    const current = history[stepNumber];\r\n    const winner = calculateWinner(current.squares);\r\n    \r\n    let status;\r\n    if(winner){\r\n        status = 'Winner is:' + winner;\r\n        \r\n    } \r\n    else {\r\n        status='Next player is: ' + (xIsNext? 'X': '0')\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>\r\n                Hello gamer\r\n            </h1>\r\n            <div className='game'>\r\n                <div className='game-board'>\r\n                    <Board\r\n                        squares={current.squares}\r\n                        onClick={(i)=> handleClick(i)}\r\n                    />\r\n                </div>\r\n                <div className='game-info'>\r\n                    <div>\r\n                        {status}\r\n                    </div>\r\n                    <ul>\r\n                        {paintMoves()}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default memo(Game);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport Game from './Game.jsx'\nimport './styles/styles.css'\n\nReactDOM.render(\n  <React.StrictMode>\n      <Game/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}